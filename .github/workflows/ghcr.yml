name: Build & publish containers
on:
  push:
    branches: [ "main" ]
    # paths:
    #   - '**/VERSION.txt'

  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  REPO_NAME: blopser

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
          - context: nginx
            image: ghcr.io/blopser/nginx
            is_latest: true

          - context: influxdb
            image: ghcr.io/blopser/influxdb
            is_latest: true

          - context: python-dev
            image: ghcr.io/blopser/python-dev
            tags: 3.12.5-slim-bookworm 3.12-slim-bookworm 3-slim-bookworm slim-bookworm 3.12.5-slim 3.12-slim 3-slim slim
            is_latest: true
            build_args: |
              BASE_IMAGE=3.12.5-slim-bookworm
          - context: python-dev
            image: ghcr.io/blopser/python-dev
            tags: 3.12.5-alpine3.20 3.12-alpine3.20 3-alpine3.20 alpine3.20 3.12.5-alpine 3.12-alpine 3-alpine alpine
            build_args: |
              BASE_IMAGE=3.12.5-alpine3.20

    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Set up BuildKit Docker container builder to be able to build
      # multi-platform images and export cache
      # https://github.com/docker/setup-buildx-action
      - name: Check changes
        # run: 'if [ -z $(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} "${{ matrix.context }}/VERSION.txt") ]; then echo "IS_CHANGED=false" >> "$GITHUB_ENV" ; else echo "IS_CHANGED=true" >> "$GITHUB_ENV" ; fi'
        run: echo "IS_CHANGED=true" >> "$GITHUB_ENV"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: env.IS_CHANGED == 'true'

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry "${{ env.REGISTRY }}"
        if: github.event_name != 'pull_request' && env.IS_CHANGED == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      # - name: Extract Docker metadata
      #   id: meta
      #   uses: docker/metadata-action@v3
      #   with:
      #     images: ${{ matrix.image }}
      #     tags: |
      #       type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
      - name: Set version
        id: getversion
        run: |
          {
            echo 'tags<<EOF'
            for tag in ${{ matrix.tags }}; do
              echo "${{ matrix.image }}:$tag-$(cat ${{ matrix.context }}/VERSION.txt)" ; done
            if ${{ matrix.is_latest }} ; then
              echo "${{ matrix.image }}:$(cat ${{ matrix.context }}/VERSION.txt)"
              echo "${{ matrix.image }}:latest" ; fi
            echo EOF
          } >> "$GITHUB_ENV"
          echo $GITHUB_ENV
        if: env.IS_CHANGED == 'true'

      # - name: Print version
      # id: printversion
      # run: echo "${{ env.IS_CHANGED }}"

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.context }}/Dockerfile
          push: false # ${{ github.event_name != 'pull_request' }}
          tags: ${{ env.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        if: env.IS_CHANGED == 'true'

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      # - name: Sign the published Docker image
      #   if: ${{ github.event_name != 'pull_request' }}
      #   env:
      #     # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
      #     TAGS: ${{ steps.meta.outputs.tags }}
      #     DIGEST: ${{ steps.build-and-push.outputs.digest }}
      #   # This step uses the identity token to provision an ephemeral certificate
      #   # against the sigstore community Fulcio instance.
      #   run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}
